/*!
 * jquery.counterup.js 2.1.0
 */



(function ($) {
    "use strict";
  
    $.fn.counterUp = function (options) {
      var settings = $.extend(
        {
          duration: 4000, // Total duration for the animation
          offset: 100, // Offset for triggering the animation
          formatter: false,
          callback: function () {},
        },
        options
      );
  
      return this.each(function () {
        var $this = $(this),
            originalNumber = parseFloat($this.text().replace(/,/g, "")),
            increment = originalNumber / settings.duration,
            current = 0;
  
        var counterAnimate = function () {
          current += increment;
          if (current >= originalNumber) {
            current = originalNumber;
            $this.text(Math.round(current)); // Use Math.round for smoother display
            settings.callback.call($this);
          } else {
            $this.text(Math.round(current));
            setTimeout(counterAnimate, 10); // Adjust timeout value for smoother animation
          }
        };
  
        // Call counter function on scroll
        $(window).on("scroll", function () {
          var scrollTop = $(this).scrollTop();
          var windowHeight = $(this).height();
          var triggerPoint = windowHeight - (windowHeight * (settings.offset / 100));
  
          if (scrollTop > triggerPoint) {
            current = 0; // Reset current to 0 every time the scroll trigger happens
            counterAnimate();
          }
        });
      });
    };
  })(jQuery);





// (function ($) {
//     "use strict";
  
//     $.fn.counterUp = function (options) {
//       var settings = $.extend(
//         {
//           time: 2400,
//           delay: 5000,
//           offset: 100,
//           formatter: false,
//           callback: function () {},
//         },
//         options
//       );
  
//       return this.each(function () {
//         var $this = $(this),
//           counter = {
//             time: $this.data("counterup-time") || settings.time,
//             delay: $this.data("counterup-delay") || settings.delay,
//             offset: $this.data("counterup-offset") || settings.offset,
//           };
  
//         var originalNumber = parseFloat($this.text().replace(/,/g, ""));
//         var increment = originalNumber / (counter.time / counter.delay);
//         var current = 0;
  
//         var counterUpper = function () {
//           var interval = setInterval(function () {
//             current += increment;
//             if (current >= originalNumber) {
//               current = originalNumber;
//               clearInterval(interval);
//               settings.callback.call($this);
//             }
//             $this.text(current.toFixed(0));
//           }, counter.delay);
//         };
  
//         // Call counter function on scroll
//         $(window).on("scroll", function () {
//           // Adjust the offset as per your requirement
//           var scrollTop = $(this).scrollTop();
//           var windowHeight = $(this).height();
//           var triggerPoint = windowHeight - (windowHeight * (counter.offset / 0));
  
//           if (scrollTop > triggerPoint) {
//             current = 0; // Reset current to 0 every time the scroll trigger happens
//             counterUpper();
//           }
//         });
//       });
//     };
//   })(jQuery);















// (function ($) {
//   "use strict";
//   $.fn.counterUp = function (options) {
//     var settings = $.extend(
//         {
//           time: 400,
//           delay: 10,
//           offset: 100,
//           beginAt: 0,
//           formatter: false,
//           context: "window",
//           callback: function () {},
//         },
//         options
//       ),
//       s;
//     return this.each(function () {
//       var $this = $(this),
//         counter = {
//           time: $(this).data("counterup-time") || settings.time,
//           delay: $(this).data("counterup-delay") || settings.delay,
//           offset: $(this).data("counterup-offset") || settings.offset,
//           beginAt: $(this).data("counterup-beginat") || settings.beginAt,
//           context: $(this).data("counterup-context") || settings.context,
//         };
//       var counterUpper = function () {
//         var nums = [];
//         var divisions = counter.time / counter.delay;
//         var num = $(this).attr("data-num")
//           ? $(this).attr("data-num")
//           : $this.text();
//         var isComma = /[0-9]+,[0-9]+/.test(num);
//         num = num.replace(/,/g, "");
//         var decimalPlaces = (num.split(".")[1] || []).length;
//         if (counter.beginAt > num) counter.beginAt = num;
//         var isTime = /[0-9]+:[0-9]+:[0-9]+/.test(num);
//         if (isTime) {
//           var times = num.split(":"),
//             m = 1;
//           s = 0;
//           while (times.length > 0) {
//             s += m * parseInt(times.pop(), 10);
//             m *= 60;
//           }
//         }
//         for (var i = divisions; i >= (counter.beginAt / num) * divisions; i--) {
//           var newNum = parseFloat((num / divisions) * i).toFixed(decimalPlaces);
//           if (isTime) {
//             newNum = parseInt((s / divisions) * i);
//             var hours = parseInt(newNum / 3600) % 24;
//             var minutes = parseInt(newNum / 60) % 60;
//             var seconds = parseInt(newNum % 60, 10);
//             newNum =
//               (hours < 10 ? "0" + hours : hours) +
//               ":" +
//               (minutes < 10 ? "0" + minutes : minutes) +
//               ":" +
//               (seconds < 10 ? "0" + seconds : seconds);
//           }
//           if (isComma) {
//             while (/(\d+)(\d{3})/.test(newNum.toString())) {
//               newNum = newNum
//                 .toString()
//                 .replace(/(\d+)(\d{3})/, "$1" + "," + "$2");
//             }
//           }
//           if (settings.formatter) {
//             newNum = settings.formatter.call(this, newNum);
//           }
//           nums.unshift(newNum);
//         }
//         $this.data("counterup-nums", nums);
//         $this.text(counter.beginAt);
//         var f = function () {
//           if (!$this.data("counterup-nums")) {
//             settings.callback.call(this);
//             return;
//           }
//           $this.html($this.data("counterup-nums").shift());
//           if ($this.data("counterup-nums").length) {
//             setTimeout($this.data("counterup-func"), counter.delay);
//           } else {
//             $this.data("counterup-nums", null);
//             $this.data("counterup-func", null);
//             settings.callback.call(this);
//           }
//         };
//         $this.data("counterup-func", f);
//         setTimeout($this.data("counterup-func"), counter.delay);
//       };
//       $this.waypoint(
//         function (direction) {
//           counterUpper();
//           this.destroy();
//         },
//         { offset: counter.offset + "%", context: counter.context }
//       );
//     });
//   };
// })(jQuery);












//up to doen only



// (function ($) {
//     "use strict";
//     $.fn.counterUp = function (options) {
//         var settings = $.extend({
//             time: 400,
//             delay: 10,
//             offset: 100,
//             beginAt: 0,
//             formatter: false,
//             context: "window",
//             callback: function () {}
//         }, options),
//         s;
        
//         return this.each(function () {
//             var $this = $(this),
//                 counter = {
//                     time: $(this).data("counterup-time") || settings.time,
//                     delay: $(this).data("counterup-delay") || settings.delay,
//                     offset: $(this).data("counterup-offset") || settings.offset,
//                     beginAt: $(this).data("counterup-beginat") || settings.beginAt,
//                     context: $(this).data("counterup-context") || settings.context
//                 };

//             var counterUpper = function () {
//                 var nums = [];
//                 var divisions = counter.time / counter.delay;
//                 var num = $(this).attr("data-num") ? $(this).attr("data-num") : $this.text();
//                 var isComma = /[0-9]+,[0-9]+/.test(num);
//                 num = num.replace(/,/g, "");
//                 var decimalPlaces = (num.split(".")[1] || []).length;
//                 if (counter.beginAt > num) counter.beginAt = num;
//                 var isTime = /[0-9]+:[0-9]+:[0-9]+/.test(num);
//                 if (isTime) {
//                     var times = num.split(":"),
//                         m = 1;
//                     s = 0;
//                     while (times.length > 0) {
//                         s += m * parseInt(times.pop(), 10);
//                         m *= 60;
//                     }
//                 }
//                 for (var i = divisions; i >= counter.beginAt / num * divisions; i--) {
//                     var newNum = parseFloat(num / divisions * i).toFixed(decimalPlaces);
//                     if (isTime) {
//                         newNum = parseInt(s / divisions * i);
//                         var hours = parseInt(newNum / 3600) % 24;
//                         var minutes = parseInt(newNum / 60) % 60;
//                         var seconds = parseInt(newNum % 60, 10);
//                         newNum = (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds);
//                     }
//                     if (isComma) {
//                         while (/(\d+)(\d{3})/.test(newNum.toString())) {
//                             newNum = newNum.toString().replace(/(\d+)(\d{3})/, "$1" + "," + "$2");
//                         }
//                     }
//                     if (settings.formatter) {
//                         newNum = settings.formatter.call(this, newNum);
//                     }
//                     nums.unshift(newNum);
//                 }
//                 $this.data("counterup-nums", nums);
//                 $this.text(counter.beginAt);
                
//                 var f = function () {
//                     if (!$this.data("counterup-nums")) {
//                         settings.callback.call(this);
//                         return;
//                     }
//                     $this.html($this.data("counterup-nums").shift());
//                     if ($this.data("counterup-nums").length) {
//                         setTimeout($this.data("counterup-func"), counter.delay);
//                     } else {
//                         $this.data("counterup-nums", null);
//                         $this.data("counterup-func", null);
//                         settings.callback.call(this);
//                     }
//                 };
//                 $this.data("counterup-func", f);
//                 setTimeout($this.data("counterup-func"), counter.delay);
//             };

//             var animated = false;

//             function resetAnimationState() {
//                 animated = false;
//             }

//             var waypoint = new Waypoint({
//                 element: $this[0],
//                 handler: function(direction) {
//                     if (!animated) {
//                         counterUpper();
//                         animated = true;
//                     }
//                     if (direction === 'up') {
//                         resetAnimationState();
//                     }
//                 },
//                 offset: counter.offset + "%"
//             });
//         });
//     };
// })(jQuery);











